# -*- coding: utf-8 -*-
"""KrishN_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16URCkUwR3l-HUMBTOO-4ehkuc9MtlbCk

# Basics of Python
- Various Datatypes in Python
- Variable
- Variables Assignment
- Print Formatting

### Arithematic Operations
"""

1+1

4-5

4*5

10/2 # division

10//2 # integer division

10%2

10**2

10*'str' # str is multiplied by 10 , return 10times

## Check the Data types

"""- reserved keywords in python : int,float,str,bool"""

type(1)

type(10.0)

print(type(True))

type("Bujji")

"""### Strings"""

"Ramanaiah"

'Ramanaiah'

type("Ramanaiah")

"""### Variable Assignment"""

# Syntax
# var_name=values

a=10

type(a)

r = 'bujji'
print(r)
type(r)

# Mathematical Operation with Variable Assignment

a=10
b=20

print(a+b)
print(a-b)
print(a*b)
print(a/b)
print(a//b)
print(a%b)
print((a*b)+(a/b)) #bodmas - bracket | of | div | mul | add | sub [rule]

# Practice
## performing algebraic expression using x & y

x = 3
y = 6

print(x+y)
print(x-y)
print(x*y)
print(x/y)
print(x//y)
print(x%y)
print(x+y-x*y)

# Various ways of printing

print('hi') # built-in function

first_name = 'Jaya'
last_name  = 'Jegileti'

print("My first name is {} and My last name is {}".format(first_name,last_name))

print("My first name is {first} and My last name is {last}".format(first = first_name,last = last_name))

print("My first name is {first} and My last name is {last}".format(last = last_name,first = first_name)) 
# - we can change order of format in our way

# Practice
print(1)

model1 = 'BMW'
model2 = 'Benz'

print("I love to buy {} but my friend advised to purchase {}".format(model1,model2))

print("I love to buy {} but my friend advised to purchase {}".format(model2,model1))



print("I love to buy {model1} but my friend advised to purchase {model2}".format(model1='BMW',model2='Benz'))

print("I love to buy {model1} but my friend advised to purchase {model2}".format(model2='Benz',model1='BMW'))

len('Bujji') # built-in function

type(['Bujji',9,3,6])

"""### Python Data Structures and Boolean
- Boolean
- Boolean and Logical Operators
- Lists
- Comparison Operators
- Dictionaries
- Tuples
- Sets

"""

# Boolean Variables
print(True,False)

type(True)

type(False)

bool()

"""- Built-in functions
- isalnum() : combination of alphabets & numbers
- isalpha() : only alphabets
- isdigit() : test if string contains digits
- istitle() : First letter of the word (Capital)
- isupper() : Check the word / sentence is in upper case
- islower() : Check the word / sentence is in lower case
- isspace() : test if string contains spaces
- endswith() : test if string end with particular letter or not
- startswith() : test if string start with particular letter or not
"""

my_str = "Jaya007"

my_str.isalnum()

my_str1 = "Jaya Lakshmi"

my_str1.isalnum()

print(my_str1.isalpha()) # bcz of whitespace

x = 'Bujji'

print(x.isalpha())

x.isdigit()

x.istitle()

x.isupper()

x.islower()

x.isspace()

x.startswith('B')

x.endswith('i')

"""### Boolean and Logical Operators"""

True and True

True and False

True or False

True or True

False or False

not True

not False

str_example='Hello World'
my_str='Jaya'

my_str.isalpha() and str_example.isalnum()

my_str.isalpha() or str_example.isnum()

"""### Lists
- A list is a data structure in Python that is a mutable, or changeable, ordered sequence of elements. Each element or value that is inside of a list is called an item. Just as strings are defined as characters between quotes, lists are defined by having values between square brackets [ ]

- List is a collection which is ordered and changeable. Allows duplicate members.


"""

type([])

lst_example=[]

type(lst_example)

lst=list()

type(lst)

lst=['Mathematics', 'chemistry', 100, 200, 300, 204]

len(lst)

len(lst[0])

type(lst)

"""- Append Method"""

#.append is used to add elements in the list {adds in the last by default}
lst.append("Krish")

lst

lst.append(["John","Bala"])

lst

##Indexing in List
lst[6]

lst[1:6]

lst[7][1] # accessing items in nested list

lst.append(["Hello","World"])

lst

lst=[1,2,3]

lst.append([4,5])

lst

"""- Insert Method"""

# insert in a specific order
# syntax - (index, value)
x = ['Ramanaiah','Cherry','Bujji']
x.insert(1,'Love')
x

"""- Extend Method"""

lst=[1,2,3,4,5,6]

lst.extend([8,9])

lst

"""- Various Operations that we can perform in List"""

lst=[1,2,3,4,5]

sum(lst)

lst*5

"""- Pop() Method
- Removes the last element when we do not specify the index
"""

lst.pop()

lst

lst.pop(0)

lst

"""- count():Calculates total occurrence of given element of List"""

lst=[1,1,2,3,39,4,5]
lst.count(1)

#length:Calculates total length of List
len(lst)

# index(): Returns the index of first occurrence. Start and End index are not necessary parameters 
# syntax - index(value,index range), result is index 
lst.index(39,3,6)

##Min and Max
min(lst)

max(lst)

"""Why Python is the Best Programming Language For Machine Learning?

Reasons:
1. Python is easy to use because syntax is very simple.
2. It has less lines of code to execute.
3. It supports many libraries and frameworks.
- Libraries : NumPy, Pandas, Scikit-learn[contains ML Algorithms], Matplotlib, Seaborn.
- Deep Learning Frameworks : TensorFlow, PyTorch, Keras
4. It is used to create web applications, web scrapping...
5. It has Community and Corporate Support that means many developers are using Python skills to increase machine learning knowledge and for implementing deep learning projects.
- Applications:
- Many Top Companies like Google, Facebook, Amazon are basically using Python to implement most of their products.For example, Amazon Alexa, Google Assistant, Siri from Apple, Netflix Movie Recommendation System, Facebook Friend Recommendation System.

# Sets
- A Set is an unordered collection data type that is iterable, mutable, and has no duplicate elements. Python's set class represents the mathematical notion of a set.This is based on a data structure known as a hash table.
- Hash tables are a type of data structure in which the address or the index value of the data element is generated from a hash function. That makes accessing the data faster as the index value behaves as a key for the data value. In other words Hash table stores key-value pairs but the key is generated through a hashing function.
- Set is a collection which is unordered, unchangeable, and unindexed. No duplicate members.
- Set does not support indexing method.
"""

## Defining an empy set

set_var= set()
print(set_var)
print(type(set_var))

set_var={1,2,3,4,3} # No Duplicate members
set_var

set_var={"Avengers","IronMan",'Hitman'}
print(set_var)
type(set_var)

# No Indexing Method
set_var[3] # does not support indexing
set_var['Avengers'] #'set' object is not subscriptable

## Inbuilt function in sets

set_var.add("Hulk")

print(set_var)

"""## Intersection ex:"""

set1={"Avengers","IronMan",'Hitman'}
set2={"Avengers","IronMan",'Hitman','Hulk2'}

set2.intersection(set1) # Returns common elements

print(set2)

set2.intersection_update(set1)

print(set2)

"""## Difference ex:"""

fruits = {'Apple','Mango','Cherry','Grapes'}
fru_01 = {'Apple','Mango','Cherry'}

##Difference - it eliminates the common elements and return unique element
fruits.difference(fru_01)

fruits

fruits.difference_update(fru_01)

fruits

"""# Dictionaries
- Dictionary is a collection which is ordered, changeable and indexed. No duplicate members.
- In Python dictionaries are written with curly brackets, and they have keys and values.
- It is a Key-Value pair.
"""

dic={}

type(dic)

type(dict())

set_ex={1,2,3,4,5} # It has only curly brackets but not key-values 
type(set_ex)

## create a dictionary
my_dict={"Car1": "Audi", "Car2":"BMW","Car3":"Mercidies Benz"}

type(my_dict) # it is in key-value pair

##Access the values based on keys
my_dict['Car1']

# We can even loop through the dictionaries keys
# forloop - iterating through keys
for x in my_dict:
    print(x)

# We can even loop throught the dictionaries keys

for x in my_dict.keys():
    print(x)

# We can even loop throught the dictionaries values

for x in my_dict.values():
    print(x)

# We can also check both keys and values
for x in my_dict.items():
    print(x)

## Adding items in Dictionaries

my_dict['car4']='Audi 2.0'

my_dict

## Modify/Replace the values
my_dict['Car1']='MAruti'

my_dict

"""-  **Nested Dictionary**"""

car1_model={'Mercedes':1960}
car2_model={'Audi':1970}
car3_model={'Ambassador':1980}

car_type={'car1':car1_model,'car2':car2_model,'car3':car3_model}

print(car_type)

## Accessing the items in the dictionary

print(car_type['car1'])

print(car_type['car1']['Mercedes']) # indexing

"""## Tuples
- Tuple is a collection which is ordered and immutable. Allows duplicate members.
- Denoted by open brackets or round brackets.
"""

## create an empty Tuples

my_tuple=tuple()

type(my_tuple)

my_tuple=()

print(type(my_tuple))

my_tuple=("Krish","Ankur","John")

my_tuple[0] # indexing possible but Replace method not possible

my_tuple[0] = 'Sir' # elements once defined cannot be changed or replaced.

# But we can change entire tuple by creating new one.
my_tuple = ('Hello','World')

print(type(my_tuple))
print(my_tuple)

my_tuple=("Krish","Ankur","John")

## Inbuilt function
my_tuple.count('Krish')

my_tuple.index('Ankur')

my_tuple1 = (1,2,3,4,4,5,6) # Allows duplicate elements
print(my_tuple1)